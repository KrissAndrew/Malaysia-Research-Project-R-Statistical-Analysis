pairs(abiotic_only)
grouped_data <- abiotic_csv %>%
group_by(site, block) %>%
summarise(across(starts_with("litter"):total_groundcover_percent, mean, na.rm=TRUE))
abiotic_only <- as.data.frame(grouped_data[, 3:ncol(grouped_data)])
my.rda_new <- rda(abiotic_only, scale=TRUE)
biplot(my.rda_new, display = "sites", type = "points")
title("Principal Component Analysis (PCA) of Abiotic Conditions Across Four Sites")
# Colors for each site
site_colors <- c("green", "blue", "red", "purple")
# Loop to plot ellipses for each site with respective color
unique_sites <- unique(grouped_data$site)
for (i in 1:length(unique_sites)) {
ordiellipse(my.rda_new, group = grouped_data$site, kind="sd", label=FALSE, conf=0.95, col=site_colors[i], lty=2, draw="polygon", show.groups=unique_sites[i])
}
text(-0.8, 1.4,cex = 1.3, "Site 1")
text(2.6, -0.5,cex = 1.3, "Site 2")
text(-0.22, -1.2,cex = 1.3, "Site 3")
text(-0.7, 0.13, cex = 1.3,"Site 4")
scores <- scores(my.rda_new, display="sites")
points(scores[,1], scores[,2], pch=16, col="black")
text(scores[,1], scores[,2], labels = grouped_data$block, pos=3, cex=1, col="black")
sp.scores <- scores(my.rda_new, display = "species")
text(sp.scores, labels = gsub("_", " ", rownames(sp.scores)), pos=3, cex=1)
arrows(0, 0, sp.scores[,1], sp.scores[,2], length = 0.1)
# View eigenvalues
eigenvals <- my.rda_new$CA$eig
print(eigenvals)
explained_var <- eigenvals / sum(eigenvals)
print(explained_var)
explained_var_percent <- explained_var * 100
print(explained_var_percent)
# Read the data from CSV file
abiotic_orig <- read.csv("csvs/mabiotic.csv", header=TRUE)
str(abiotic_orig)
data_long_light <- abiotic_orig %>%
pivot_longer(
cols = starts_with("Light"),
names_to = "Measurement",
values_to = "Value")
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model5 <- aov(Average.Light..Lux. ~ Site.Type + Error(Site), data = data_long_light)
# Compute emmeans and run tukey tests
LSem <- emmeans(model5, "Site.Type", type = "response")
pairs(LSem) # No significance seen for basal area
# 1. Mean Light Flux
ggplot(data_long, aes(x=`Site.Type`, y=`Average.Light..Lux.`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(data_long, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_minimal()
# 1. Mean Light Flux
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_minimal()
anova_humidity <- aov(mean_rel_humidity ~ forest_type, data=abiotic_csv)
summary(anova_humidity)
# 2. Relative Humidity
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_minimal()
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model6 <- aov(Average.Rel..Humidity.... ~ Site.Type + Error(Site), data = data_long_light)
# Compute emmeans and run tukey tests
HSem <- emmeans(model6, "Site.Type", type = "response")
pairs(LSem)
# 3. Litter Depth
ggplot(abiotic_csv, aes(x=forest_type, y=litter_depth_mm, fill=forest_type)) +
geom_boxplot() +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
# 2. Relative Humidity
ggplot(data_long_light, aes(x=`Site.Type`, y=`litter_depth_mm`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
View(data_long_light)
View(abiotic_csv)
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=`Site.Type`, y=`litter_depth_mm`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=`Site.Type`, y=`litter_depth_mm`, fill=Site.Type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=Site.Type, y=`litter_depth_mm`, fill=Site.Type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
# 3. Litter Depth
ggplot(abiotic_csv, aes(x=forest_type, y=litter_depth_mm, fill=forest_type)) +
geom_boxplot() +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=`Average.Rel..Humidity....`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=mean_rel_humidity, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_minimal()
# 2. Relative Humidity
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
# 4. Mean Soil pH (Field)
ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field, fill=forest_type)) +
geom_boxplot() +
labs(title="Boxplot of Mean Soil pH (Field) Across Sites") +
theme_minimal()
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model6 <- aov(litter_depth_mm ~ forest_type + Error(Site), data = abiotic_csv)
View(data_long_light)
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model6 <- aov(litter_depth_mm ~ forest_type + Error(Site), data = abiotic_csv)
View(abiotic_csv)
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model6 <- aov(litter_depth_mm ~ forest_type + Error(site), data = abiotic_csv)
# Fit nested ANOVA models for basal area, volume, trees per hectare,
model7 <- aov(litter_depth_mm ~ forest_type + Error(site), data = abiotic_csv)
# Compute emmeans and run tukey tests
LSem <- emmeans(model7, "Site.Type", type = "response")
# Compute emmeans and run tukey tests
LSem <- emmeans(model7, "forest_type", type = "response")
pairs(LSem)
# 4. Mean Soil pH (Field)
ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
geom_jitter(width=0.3, size=1, alpha=0.5) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
model8 <- aov(mean_soil_pH_field ~ forest_type + Error(site), data = abiotic_csv)
PSem <- emmeans(model8, "forest_type", type = "response")
pairs(PSem)
# 4. Mean Soil pH (Field)
ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
ggplot(abiotic_csv, aes(x=forest_type, y=litter_depth_mm)) +
geom_boxplot() +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_minimal()
ggplot(abiotic_csv, aes(x=forest_type, y=litter_depth_mm)) +
geom_boxplot() +
labs(title="Boxplot of Litter Depth Across Sites")
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites")
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites")
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points")
+ theme_bw()
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_bw()
# Read the data from CSV file
abiotic_orig <- read.csv("csvs/mabiotic.csv", header=TRUE)
str(abiotic_orig)
# Need long data for light and humidity
data_long_light <- abiotic_orig %>%
pivot_longer(
cols = starts_with("Light"),
names_to = "Measurement",
values_to = "Value")
# Fit nested ANOVA models for light, humidity, leaf litter
model5 <- aov(Average.Light..Lux. ~ Site.Type + Error(Site), data = data_long_light)
# Compute emmeans and run tukey tests
LSem <- emmeans(model5, "Site.Type", type = "response")
pairs(LSem)
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`, fill=`Site.Type`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_bw()
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_bw()
# 2. Relative Humidity
model6 <- aov(Average.Rel..Humidity.... ~ Site.Type + Error(Site), data = data_long_light)
# Fit nested ANOVA models, compute emmeans and run tukey tests for light, humidity, leaf litter, & field pH
model5 <- aov(Average.Light..Lux. ~ Site.Type + Error(Site), data = data_long_light)
LSem <- emmeans(model5, "Site.Type", type = "response")
pairs(LSem)
model6 <- aov(Average.Rel..Humidity.... ~ Site.Type + Error(Site), data = data_long_light)
HSem <- emmeans(model6, "Site.Type", type = "response")
pairs(HSem)
model7 <- aov(litter_depth_mm ~ forest_type + Error(site), data = abiotic_csv)
LSem <- emmeans(model7, "forest_type", type = "response")
pairs(LSem)
model8 <- aov(mean_soil_pH_field ~ forest_type + Error(site), data = abiotic_csv)
PSem <- emmeans(model8, "forest_type", type = "response")
pairs(PSem)
ggplot(data_long_light, aes(x = `Site.Type`, y = `Average.Rel..Humidity....`)) +
geom_boxplot(alpha = 0.7) +
labs(title ="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_bw()
# Boxplots
# arrange next four plots in a 2x2 grid
par(mfrow = c(2, 2), mar = c(5, 4, 2, 1))
ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_bw()
ggplot(data_long_light, aes(x = `Site.Type`, y = `Average.Rel..Humidity....`)) +
geom_boxplot(alpha = 0.7) +
labs(title ="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_bw()
ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_bw()
# 4. Mean Soil pH (Field)
ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field, fill=forest_type)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_bw()
# Restore default plot parameters
par(mfrow = c(1, 1), mar = c(5, 4, 4, 2) + 0.1)
# 4. Mean Soil pH (Field)
ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_bw()
# Ensure you have the gridExtra package installed
install.packages("gridExtra")
library(gridExtra)
library(gridExtra) # for ggplot grids
# Create each plot separately then feed to grid extra
p1 <- ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Light Across Sites with Individual Data Points") +
theme_bw()
p2 <- ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Relative Humidity Across Sites with Individual Data Points") +
theme_bw()
p3 <- ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_bw()
p4 <- ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field)) +
geom_boxplot(alpha=0.7) +
labs(title="Boxplot of Litter Depth Across Sites") +
theme_bw()
# Arrange the plots in a 2x2 grid using grid.arrange()
grid.arrange(p1, p2, p3, p4, ncol=2)
# Average of Basal Area by Forest Type
p1 <- ggplot(dat1, aes(x = forest_type, y = Average.of.basal_area)) +
geom_boxplot(alpha=0.7) +
labs(title = "Average of Basal Area by Forest Type",
x = "Forest Type",
y = expression("Average of Basal Area (m"^2*")")) +
theme_bw()
# Average of Trees per hectare by Forest Type
p2 <- ggplot(dat1, aes(x = forest_type, y = Average.of.trees_ha)) +
geom_boxplot(alpha=0.7) +
labs(title = "Average of Trees per hectare by Forest Type",
x = "Forest Type",
y = "Average of Trees per hectare") +
theme_bw()
# Average of Tree Volume by Forest Type
p3 <- ggplot(dat1, aes(x = forest_type, y = Average.of.tree_volume)) +
geom_boxplot(alpha=0.7) +
labs(title = "Average of Tree Volume by Forest Type",
x = "Forest Type",
y = expression("Average of Tree Volume (m"^3*")")) +
theme_bw()
# Average of Ground Cover Percentage by Forest Type
p4 <- ggplot(dat1, aes(x = forest_type, y = Average.of.total_groundcover)) +
geom_boxplot(alpha=0.7) +
labs(title = "Average of Ground Cover Percentage by Forest Type",
x = "Forest Type",
y = "Average of Ground Cover (%)") +
theme_bw()
# Arrange plots in 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol=2)
# Average of Basal Area by Forest Type
p1 <- ggplot(dat1, aes(x = forest_type, y = Average.of.basal_area)) +
geom_boxplot(alpha=0.7) +
labs(title = "Basal Area Across Sites",
x = "Forest Type",
y = expression("Average Basal Area (m"^2*")")) +
theme_bw()
# Average of Trees per hectare by Forest Type
p2 <- ggplot(dat1, aes(x = forest_type, y = Average.of.trees_ha)) +
geom_boxplot(alpha=0.7) +
labs(title = "Trees per hectare Across Sites",
x = "Forest Type",
y = "Average Trees per hectare") +
theme_bw()
# Average of Tree Volume by Forest Type
p3 <- ggplot(dat1, aes(x = forest_type, y = Average.of.tree_volume)) +
geom_boxplot(alpha=0.7) +
labs(title = "Tree Volume Across Sites",
x = "Forest Type",
y = expression("Average Tree Volume (m"^3*")")) +
theme_bw()
# Average of Ground Cover Percentage by Forest Type
p4 <- ggplot(dat1, aes(x = forest_type, y = Average.of.total_groundcover)) +
geom_boxplot(alpha=0.7) +
labs(title = "Ground Cover Across Sites",
x = "Forest Type",
y = "Average Ground Cover (%)") +
theme_bw()
# Arrange plots in 2x2 grid
grid.arrange(p1, p2, p3, p4, ncol=2)
# Create each plot separately then feed to grid extra
p1 <- ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Light..Lux.`)) +
geom_boxplot(alpha=0.7) +
labs(title="Light Intensity Across Sites",
x = "Forest Type",
y = "Light Intensity (Lux)") +
theme_bw()
p2 <- ggplot(data_long_light, aes(x=`Site.Type`, y=`Average.Rel..Humidity....`)) +
geom_boxplot(alpha=0.7) +
labs(title="Relative Humidity Across Sites",
x = "Forest Type",
y = "Relative Humidity (%)") +
theme_bw()
p3 <- ggplot(abiotic_csv, aes(x=forest_type, y=`litter_depth_mm`)) +
geom_boxplot(alpha=0.7) +
labs(title="Litter Depth Across Sites",
x = "Forest Type",
y = "Litter Depth (mm)") +
theme_bw()
p4 <- ggplot(abiotic_csv, aes(x=forest_type, y=mean_soil_pH_field)) +
geom_boxplot(alpha=0.7) +
labs(title="Field Soil pH Across Sites",
x = "Forest Type",
y = "Soil pH (Field)") +
theme_bw()
# Arrange the plots in a 2x2 grid using grid.arrange()
grid.arrange(p1, p2, p3, p4, ncol=2)
## nMDS
dat3<-read.csv("csvs/mgcover.csv")
## Obtain only the numeric columns for the community data matrix
com <- dat3[, sapply(dat3, is.numeric)]
## Check for NA, NaN, or Inf values and handle them column-wise
com <- data.frame(lapply(com, function(x) {
if(any(is.na(x)) || any(is.nan(x)) || any(is.infinite(x))) {
cat("Column contains NA, NaN, or Inf values. Handling them...\n")
x[is.na(x)] <- 0  ## This is a simplistic way, consider better imputation methods as needed
x[is.nan(x)] <- 0
x[is.infinite(x)] <- 0
}
return(x)
}))
m_com = as.matrix(com)
set.seed(123)
nmds = metaMDS(m_com, distance = "bray")
nmds
#extract NMDS scores (x and y coordinates)
## Extract NMDS scores
data.scores <- as.data.frame(scores(nmds)$sites)
#extract NMDS scores (x and y coordinates) for sites from newer versions of vegan package
data.scores$forest_type = dat3$forest_type
figureX = ggplot(data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(size = 4, aes( colour = forest_type))+
theme(axis.text.y = element_text(colour = "black", size = 12, face = "bold"),
axis.text.x = element_text(colour = "black", face = "bold", size = 12),
legend.text = element_text(size = 12, face ="bold", colour ="black"),
legend.position = "right", axis.title.y = element_text(face = "bold", size = 14),
axis.title.x = element_text(face = "bold", size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black", face = "bold"),
panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
legend.key=element_blank()) +
labs(x = "NMDS1", colour = "forest_type", y = "NMDS2")  +
scale_colour_manual(values = c("#009E73", "#E69F00", "blue", "red"))
figureX
## Filter only numeric columns for distance matrix computation
numeric_data <- dat3[, sapply(dat3, is.numeric)]
## Compute the distance matrix
dist_dml <- vegdist(x = as.matrix(numeric_data), method = "bray", binary=FALSE, diag=TRUE, upper=TRUE, na.rm=FALSE)
## Perform PERMANOVA test
set.seed(12345)
y_permanova <- adonis2(dist_dml ~ forest_type, data = dat3, permutations = 999)
print(y_permanova)
## nMDS
dat3<-read.csv("csvs/mgcover.csv")
## Obtain only the numeric columns for the community data matrix
com <- dat3[, sapply(dat3, is.numeric)]
## Check for NA, NaN, or Inf values and handle them column-wise
com <- data.frame(lapply(com, function(x) {
if(any(is.na(x)) || any(is.nan(x)) || any(is.infinite(x))) {
cat("Column contains NA, NaN, or Inf values. Handling them...\n")
x[is.na(x)] <- 0  ## This is a simplistic way, consider better imputation methods as needed
x[is.nan(x)] <- 0
x[is.infinite(x)] <- 0
}
return(x)
}))
m_com = as.matrix(com)
set.seed(123)
nmds = metaMDS(m_com, distance = "bray")
nmds
#extract NMDS scores (x and y coordinates)
## Extract NMDS scores
data.scores <- as.data.frame(scores(nmds)$sites)
#extract NMDS scores (x and y coordinates) for sites from newer versions of vegan package
data.scores$forest_type = dat3$forest_type
figureX = ggplot(data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(size = 4, aes( colour = forest_type))+
theme(axis.text.y = element_text(colour = "black", size = 12, face = "bold"),
axis.text.x = element_text(colour = "black", face = "bold", size = 12),
legend.text = element_text(size = 12, face ="bold", colour ="black"),
legend.position = "right", axis.title.y = element_text(face = "bold", size = 14),
axis.title.x = element_text(face = "bold", size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black", face = "bold"),
panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
legend.key=element_blank()) +
labs(x = "NMDS1", colour = "forest_type", y = "NMDS2")  +
scale_colour_manual(values = c("#009E73", "#E69F00", "blue", "red"))
figureX
## Filter only numeric columns for distance matrix computation
numeric_data <- dat3[, sapply(dat3, is.numeric)]
## Compute the distance matrix
dist_dml <- vegdist(x = as.matrix(numeric_data), method = "bray", binary=FALSE, diag=TRUE, upper=TRUE, na.rm=FALSE)
## Perform PERMANOVA test
set.seed(12345)
y_permanova <- adonis2(dist_dml ~ forest_type, data = dat3, permutations = 999)
print(y_permanova)
figureX = ggplot(data.scores, aes(x = NMDS1, y = NMDS2)) +
geom_point(size = 4, aes( colour = forest_type))+
theme(axis.text.y = element_text(colour = "black", size = 12, face = "bold"),
axis.text.x = element_text(colour = "black", face = "bold", size = 12),
legend.text = element_text(size = 12, face ="bold", colour ="black"),
legend.position = "right", axis.title.y = element_text(face = "bold", size = 14),
axis.title.x = element_text(face = "bold", size = 14, colour = "black"),
legend.title = element_text(size = 14, colour = "black", face = "bold"),
panel.background = element_blank(), panel.border = element_rect(colour = "black", fill = NA, size = 1.2),
legend.key=element_blank()) +
labs(x = "NMDS1", colour = "forest_type", y = "NMDS2", title="Non-Metric Multidimensional Scaling (NMDS) of Ground Cover Across Different Forest Types")  +
scale_colour_manual(values = c("#009E73", "#E69F00", "blue", "red"))
figureX
## Filter only numeric columns for distance matrix computation
numeric_data <- dat3[, sapply(dat3, is.numeric)]
## Compute the distance matrix
dist_dml <- vegdist(x = as.matrix(numeric_data), method = "bray", binary=FALSE, diag=TRUE, upper=TRUE, na.rm=FALSE)
## Perform PERMANOVA test
set.seed(12345)
y_permanova <- adonis2(dist_dml ~ forest_type, data = dat3, permutations = 999)
print(y_permanova)
